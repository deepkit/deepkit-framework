on:
  workflow_call:
    inputs:
      skip:
        default: ''
        required: false
        type: string

env:
  NX_CLOUD_ENCRYPTION_KEY: ${{ secrets.NX_CLOUD_ENCRYPTION_KEY }}
  NX_CLOUD_AUTH_TOKEN: ${{ secrets.NX_CLOUD_AUTH_TOKEN }}
  NX_VERBOSE_LOGGING: ${{ secrets.NX_VERBOSE_LOGGING }}
  NX_SKIP_NX_CACHE: ${{ secrets.NX_SKIP_NX_CACHE }}
  NX_TASKS_RUNNER: ${{ secrets.NX_TASKS_RUNNER }}
  NX_PERF_LOGGING: ${{ secrets.NX_PERF_LOGGING }}

permissions:
  contents: read
  actions: read
  pull-requests: read
  id-token: write

jobs:
  print-affected:
    uses: ./.github/workflows/print-affected.yml
    secrets: inherit

  build:
    runs-on: buildjet-2vcpu-ubuntu-2004
    if: contains(inputs.skip, 'build') == false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup

      - run: pnpm run install-compiler

      - name: Run affected builds
        run: pnpm nx affected:build

  test:
    runs-on: buildjet-2vcpu-ubuntu-2004
    if: contains(inputs.skip, 'test') == false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup

      - run: pnpm run install-compiler

      - name: Run affected tests
        run: pnpm nx affected:test --configuration=ci --exclude=postgres,sqlite,mysql,mongo

  test-sqlite:
      if: contains(needs.print-affected.outputs.projects, 'sqlite')
      runs-on: buildjet-2vcpu-ubuntu-2004
      needs:
          - print-affected
      steps:
          -   uses: actions/checkout@v3
              with:
                  fetch-depth: 0

          -   name: Setup
              id: setup
              uses: ./.github/actions/setup

          -   run: pnpm run install-compiler

          -   run: pnpm nx run sqlite:test:ci

  test-mongo:
      if: contains(needs.print-affected.outputs.projects, 'mongo')
      runs-on: buildjet-2vcpu-ubuntu-2004
      needs:
          - print-affected
      strategy:
          matrix:
              mongo-version:
                  - 5
                  - 6
                  - 7
      services:
          # this is used for the simple-auth test
          mongo:
              image: mongo:${{ matrix.mongo-version }}
              ports:
                  - "27018:27017"
              env:
                  MONGO_INITDB_ROOT_USERNAME: root
                  MONGO_INITDB_ROOT_PASSWORD: root
                  MONGO_INITDB_DATABASE: root-db
              volumes:
                  - /packages/mongo/tests/docker/simple-auth/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      steps:
          - name: Start MongoDB
            uses: supercharge/mongodb-github-action@v1.10.0
            with:
                mongodb-version: ${{ matrix.mongo-version }}
                mongodb-replica-set: test-rs

          - uses: actions/checkout@v3
            with:
                fetch-depth: 0

          - name: Setup
            id: setup
            uses: ./.github/actions/setup

          - run: pnpm run install-compiler

          - run: pnpm nx run mongo:test:ci

  test-mysql:
      if: contains(needs.print-affected.outputs.projects, 'mysql')
      runs-on: buildjet-2vcpu-ubuntu-2004
      needs:
          - print-affected
      strategy:
          matrix:
            mysql-version:
                - 5
                - 8
      services:
          mysql:
              image: mysql:${{ matrix.mysql-version }}
              options: >-
                  --health-cmd "mysqladmin ping --silent"
                  -e MYSQL_ALLOW_EMPTY_PASSWORD=yes
                  -e MYSQL_DATABASE=default
              ports:
                  - "3306:3306"
      steps:
          - uses: actions/checkout@v3
            with:
                fetch-depth: 0

          - name: Setup
            id: setup
            uses: ./.github/actions/setup

          - run: pnpm run install-compiler

          - run: pnpm nx run mysql:test:ci

  test-postgres:
      if: contains(needs.print-affected.outputs.projects, 'postgres')
      runs-on: buildjet-2vcpu-ubuntu-2004
      needs:
          - print-affected
      strategy:
          matrix:
              postgres-version:
                  - 14
                  - 15
      services:
          postgres:
              image: postgres:${{ matrix.postgres-version }}
              env:
                  POSTGRES_USER: postgres
                  POSTGRES_PASSWORD: ''
                  POSTGRES_HOST_AUTH_METHOD: trust
              ports:
                  - "5432:5432"
              options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      steps:
          - uses: actions/checkout@v3
            with:
                fetch-depth: 0

          - name: Setup
            id: setup
            uses: ./.github/actions/setup

          - run: pnpm run install-compiler

          - run: pnpm nx run postgres:test:ci

  lint:
    runs-on: buildjet-2vcpu-ubuntu-2004
    if: contains(inputs.skip, 'lint') == false
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup

      - name: Run affected linting
        run: pnpm nx affected:lint
